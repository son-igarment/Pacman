// This file was generated by Animera

#ifndef ANIMERA_SPRITES_HPP
#define ANIMERA_SPRITES_HPP

#include <memory>
#include <cassert>
#include <cstddef>
#include <cstdint>

namespace animera {

struct alignas(std::uint64_t) SpriteRect {
  std::uint16_t x = 0, y = 0;
  std::uint16_t w = 0, h = 0;
};

[[nodiscard]] constexpr bool operator==(const SpriteRect a, const SpriteRect b) noexcept {
  return a.x == b.x && a.y == b.y && a.w == b.w && a.h == b.h;
}

[[nodiscard]] constexpr bool operator!=(const SpriteRect a, const SpriteRect b) noexcept {
  return !(a == b);
}

struct TextureInfo {
  const unsigned char *data;
  std::size_t size;
  std::size_t pitch;
  int width;
  int height;
};

std::unique_ptr<const unsigned char []> decompressTexture(const TextureInfo &) noexcept;

inline namespace sprites {

extern const int texture_width;
extern const int texture_height;
extern const std::size_t texture_pitch;
extern const std::size_t texture_size;
extern const unsigned char texture_data[];
extern const SpriteRect sprite_rects[];

enum class SpriteID {
  null_ = 0,
  dot = 1,
  energizer = 2,
  pacman_beg_ = 3,
  pacman_0 = 3,
  pacman_1 = 4,
  pacman_2 = 5,
  pacman_3 = 6,
  pacman_4 = 7,
  pacman_5 = 8,
  pacman_6 = 9,
  pacman_7 = 10,
  pacman_end_ = 11,
  scared_beg_ = 11,
  scared_0 = 11,
  scared_1 = 12,
  scared_end_ = 13,
  maze = 13,
  win = 14,
  lose = 15,
  blinky_beg_ = 16,
  blinky_up = 16,
  blinky_right = 17,
  blinky_down = 18,
  blinky_left = 19,
  blinky_end_ = 20,
  pinky_beg_ = 20,
  pinky_up = 20,
  pinky_right = 21,
  pinky_down = 22,
  pinky_left = 23,
  pinky_end_ = 24,
  inky_beg_ = 24,
  inky_up = 24,
  inky_right = 25,
  inky_down = 26,
  inky_left = 27,
  inky_end_ = 28,
  clyde_beg_ = 28,
  clyde_up = 28,
  clyde_right = 29,
  clyde_down = 30,
  clyde_left = 31,
  clyde_end_ = 32,
  eyes_beg_ = 32,
  eyes_up = 32,
  eyes_right = 33,
  eyes_down = 34,
  eyes_left = 35,
  eyes_end_ = 36,
  count_ = 36,
};

[[nodiscard]] inline SpriteRect getSpriteRect(const SpriteID id) noexcept {
  assert(0 <= static_cast<int>(id));
  assert(static_cast<int>(id) < static_cast<int>(SpriteID::count_));
  return sprite_rects[static_cast<int>(id)];
}

[[nodiscard]] inline TextureInfo getTextureInfo(SpriteID = SpriteID::null_) noexcept {
  return {texture_data, texture_size, texture_pitch, texture_width, texture_height};
}

[[nodiscard]] constexpr SpriteID operator+(SpriteID id, const int off) noexcept {
  assert(0 <= static_cast<int>(id));
  assert(static_cast<int>(id) < static_cast<int>(SpriteID::count_));
  id = SpriteID{static_cast<int>(id) + off};
  assert(0 <= static_cast<int>(id));
  assert(static_cast<int>(id) < static_cast<int>(SpriteID::count_));
  return id;
}

[[nodiscard]] constexpr SpriteID operator-(const SpriteID id, const int off) noexcept {
  return id + -off;
}

[[nodiscard]] constexpr int operator-(const SpriteID a, const SpriteID b) noexcept {
  assert(0 <= static_cast<int>(a));
  assert(static_cast<int>(a) <= static_cast<int>(SpriteID::count_));
  assert(0 <= static_cast<int>(b));
  assert(static_cast<int>(b) < static_cast<int>(SpriteID::count_));
  return static_cast<int>(a) - static_cast<int>(b);
}

constexpr SpriteID &operator+=(SpriteID &id, const int off) noexcept {
  id = id + off;
  return id;
}

constexpr SpriteID &operator-=(SpriteID &id, const int off) noexcept {
  id = id - off;
  return id;
}

constexpr SpriteID &operator++(SpriteID &id) noexcept {
  return id += 1;
}

constexpr SpriteID &operator--(SpriteID &id) noexcept {
  return id -= 1;
}

constexpr SpriteID operator++(SpriteID &id, int) noexcept {
  const SpriteID copy = id;
  id += 1;
  return copy;
}

constexpr SpriteID operator--(SpriteID &id, int) noexcept {
  const SpriteID copy = id;
  id -= 1;
  return copy;
}

}

}

#endif
